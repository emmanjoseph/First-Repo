import { __assign, __spreadArray } from "tslib";
import React, { useEffect, useRef, useState } from 'react';
import { useCarousel } from '../hooks/useCarusel';
import { useResize } from '../hooks/useResize';
import { renderChild, renderChildren, setNextPage, setPrevPage } from '../utils';
import stylesCss from '../styles/carousel.module.css';
import SideCard from './SideCard';
import CustomArrowsWrapper from './CustomArrowsWrapper';
import { useCarouselContext } from '../hooks/useCaruselContext';
import { useAnimation } from '../hooks/useAnimation';
var Carousel = function (_a) {
    var i18n = _a.i18n, defaultActivePage = _a.defaultActivePage, defaultCardsCount = _a.defaultCardsCount, _b = _a.variant, variant = _b === void 0 ? 'regular' : _b, disabled = _a.disabled, _c = _a.cards, cards = _c === void 0 ? [] : _c, _d = _a.cardWidth, cardWidth = _d === void 0 ? 300 : _d, cardContainerStyles = _a.cardContainerStyles, carouselContainerStyles = _a.carouselContainerStyles, paginationButtonStyles = _a.paginationButtonStyles, _e = _a.marginCard, marginCard = _e === void 0 ? 1 : _e, header = _a.header, _f = _a.noCardsText, noCardsText = _f === void 0 ? 'No cards selected' : _f, children = _a.children, CustomArrowBtn = _a.CustomArrowBtn, CustomPaginationBtn = _a.CustomPaginationBtn, CustomNoCardsBlock = _a.CustomNoCardsBlock, withAnimation = _a.withAnimation;
    var _g = useState(defaultCardsCount || 3), selected = _g[0], setSelected = _g[1];
    var _h = useState(0), touchStart = _h[0], setTouchStart = _h[1];
    var _j = useState(0), touchEnd = _j[0], setTouchEnd = _j[1];
    var _k = useState(1), currentPageLocal = _k[0], setCurrentPageLocal = _k[1];
    var ref = useRef(null);
    var refCard = useRef(null);
    var _l = useCarouselContext(), contextCurrentPage = _l.currentPage, contextOnCurrentPage = _l.onCurrentPage, contextHandlePrevPage = _l.handlePrevPage, contextHandleNextPage = _l.handleNextPage, onTotalPageCountChange = _l.onTotalPageCountChange;
    var currentPage = contextCurrentPage || 1;
    var handleNextPage = contextHandleNextPage;
    var onCurrentPage = contextOnCurrentPage;
    var handlePrevPage = contextHandlePrevPage;
    if (!contextCurrentPage) {
        currentPage = currentPageLocal;
        handleNextPage = setNextPage(setCurrentPageLocal);
        onCurrentPage = setCurrentPageLocal;
        handlePrevPage = setPrevPage(setCurrentPageLocal);
    }
    var isPaginationShown = variant !== 'withoutPagination' && !variant.includes('withoutPagination');
    var isArrowsShown = variant !== 'withoutArrows' && !variant.includes('withoutArrows');
    var isSideCardsShown = variant === 'withSideCards' || variant.includes('withSideCards');
    var isRegularCardsShown = variant === 'regular' || variant.includes('regular');
    var _m = useCarousel({
        selected: selected,
        cards: cards,
        currentPage: currentPage,
        isSideCardsShown: isSideCardsShown,
    }), totalPageCount = _m.totalPageCount, selectedCards = _m.selectedCards;
    var _o = useResize({
        ref: ref,
        setSelected: setSelected,
        cardWidth: cardWidth,
        refCard: refCard,
        isRegularCardsShown: isRegularCardsShown,
    }), width = _o.width, widthCard = _o.widthCard;
    var isAnimate = useAnimation({ withAnimation: withAnimation, selectedCards: selectedCards }).isAnimate;
    var handleTouchStart = function (e) { return setTouchStart(e.targetTouches[0].clientX); };
    var handleTouchMove = function (e) { return setTouchEnd(e.targetTouches[0].clientX); };
    var handleTouchEnd = function () {
        if (touchStart - touchEnd > 10) {
            /** Swipe Right **/
            if (currentPage < totalPageCount) {
                handleNextPage();
            }
        }
        if (touchStart - touchEnd < -10) {
            /** Swipe Left **/
            if (currentPage > 1) {
                handlePrevPage();
            }
        }
    };
    var keyDownHandle = function (e) {
        /** Key arrow Right **/
        if (e.key === 'ArrowRight') {
            if (currentPage < totalPageCount) {
                handleNextPage();
            }
        }
        /** Key arrow Left **/
        if (e.key === 'ArrowLeft') {
            handlePrevPage();
        }
    };
    var paginationHandle = function (index) {
        onCurrentPage(index + 1);
    };
    useEffect(function () {
        if (defaultActivePage) {
            onCurrentPage(defaultActivePage);
        }
    }, [defaultActivePage, onCurrentPage]);
    useEffect(function () {
        onTotalPageCountChange(totalPageCount);
    }, [totalPageCount, onTotalPageCountChange]);
    useEffect(function () {
        if (currentPage > totalPageCount) {
            setCurrentPageLocal(totalPageCount);
            contextOnCurrentPage(totalPageCount);
        }
    }, [totalPageCount, currentPage]);
    useEffect(function () {
        window.addEventListener('keydown', keyDownHandle);
        return function () { return window.removeEventListener('keydown', keyDownHandle); };
    }, [keyDownHandle]);
    return (React.createElement("div", { className: stylesCss['carousel-container'], ref: ref, style: carouselContainerStyles, "data-testid": "carousel-".concat(i18n) },
        React.createElement("div", { className: stylesCss['carousel-container__header'] },
            header,
            isArrowsShown && totalPageCount > 1 && (React.createElement(CustomArrowsWrapper, { CustomArrowBtn: CustomArrowBtn, currentPage: currentPage, lastPage: totalPageCount, disabled: disabled, handleNextPage: handleNextPage, handlePrevPage: handlePrevPage }))),
        React.createElement("div", { className: stylesCss['carousel-container__body'], "data-testid": 'carousel-container__body', style: cardContainerStyles, onTouchStart: handleTouchStart, onTouchMove: handleTouchMove, onTouchEnd: handleTouchEnd },
            React.createElement("div", { ref: refCard, style: { height: 0, width: '100%', maxWidth: cardWidth + 'px' } }),
            React.createElement("div", { style: __assign(__assign(__assign({ gap: marginCard + 'px', display: 'flex', width: '100%' }, (withAnimation && {
                    opacity: isAnimate ? '1' : '0',
                    transition: 'opacity 0.5s ease-in-out',
                })), ((withAnimation === null || withAnimation === void 0 ? void 0 : withAnimation.animateIn) && isAnimate ? withAnimation.animateIn : withAnimation === null || withAnimation === void 0 ? void 0 : withAnimation.animateOut)), cardContainerStyles) }, !cards.length ? (React.createElement(React.Fragment, null, CustomNoCardsBlock ? (renderChild(CustomNoCardsBlock, {
                noCardsText: noCardsText,
            })) : (React.createElement("div", { className: stylesCss['no-cards-container'] },
                React.createElement("span", { className: stylesCss['carousel-container__text'] }, noCardsText))))) : (selectedCards.map(function (item, index) {
                if (!isAnimate && withAnimation) {
                    return renderChildren(children, __assign(__assign({}, item), { style: {
                            maxWidth: cardWidth,
                            visibility: 'hidden',
                        } }));
                }
                if (isSideCardsShown) {
                    if ((index === 0 && currentPage !== 1) ||
                        (selected < selectedCards.length && index === selectedCards.length - 1) ||
                        (index === selected - 1 && currentPage === 1)) {
                        return (React.createElement(SideCard, { index: index, item: item, width: width, key: item.key, selected: selected, cardWidth: cardWidth, widthCard: widthCard, marginCard: marginCard, child: children }));
                    }
                }
                return renderChildren(children, __assign(__assign({}, item), { style: __assign(__assign({}, styles.card), { maxWidth: cardWidth }) }));
            })))),
        isPaginationShown && totalPageCount > 1 && (React.createElement("div", { className: stylesCss['carousel-container__pagination-box'] }, __spreadArray([], cards, true).splice(0, totalPageCount).map(function (item, index) {
            return CustomPaginationBtn ? (renderChild(CustomPaginationBtn, {
                onClick: function () { return paginationHandle(index); },
                key: "".concat(item.key, "-button"),
                disabled: disabled,
                isActivePage: currentPage === index + 1,
            })) : (React.createElement("button", { className: stylesCss['pagination-button'], disabled: disabled, key: "".concat(item.key, "-button"), onClick: function () { return paginationHandle(index); }, style: __assign(__assign({}, paginationButtonStyles), { cursor: disabled ? 'not-allowed' : 'pointer', backgroundColor: currentPage === index + 1 ? 'hsla(200, 85%, 60%, 0.8)' : 'rgba(0, 0, 0, 0.1)' }), "data-testid": "pagination-Button".concat(index + 1) }));
        })))));
};
export default Carousel;
var styles = {
    card: {
        width: '100%',
    },
};
//# sourceMappingURL=Carousel.js.map